<?php

namespace ISI\ISIBundle\Repository;

/**
 * FrequenterRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FrequenterRepository extends \Doctrine\ORM\EntityRepository
{

    public function frequenterValidee(int $as)
    {
        $qb = $this->createQueryBuilder('f');
        // $admission = NULL;
        $qb->select('f')
           ->where('f.annee = :anneeId AND f.admission IS NULL')
           ->setParameter('anneeId', $as);
        //    ->setParameter('admission', $admission);

        // return $qb->getDql();
        return $qb->getQuery()
                  ->getResult();
    }

    public function elevesDuRegime(int $as, int $annexeId, $regime)
    {
        $qb = $this->createQueryBuilder('f');
        $grp = ($regime == 'A') ? 1 : 2 ;
        $qb->select('f')
           ->join('f.eleve', 'e')
           ->addSelect('e')
           ->join('f.classe', 'c')
           ->addSelect('c')
           ->join('c.niveau', 'n')
           ->addSelect('n')
           ->where('n.groupeFormation = :grp AND f.annee = :as AND e.renvoye = 0')
           ->setParameter('grp', $grp)
           ->setParameter('as', $as);

        return $qb->getQuery()
                  ->getResult();
    }

    public function derniereFrequentation($eleveId)
    {
        $offset = 0;
        $limit = 1;
        $qb = $this->createQueryBuilder('f');
        $qb->select('f')
           ->join('f.eleve', 'e')
           ->addSelect('e')
           ->where('e.id = :eleveId') 
           ->orderBy('f.id', 'DESC')
           ->setFirstResult( $offset )
           ->setMaxResults( $limit )
           ->setParameter('eleveId', $eleveId);

        return $qb->getQuery()
                  ->getResult();
    }

    public function statistiquesClasse(int $classeId)
    {
        $renvoi = false;
        $qb = $this->createQueryBuilder('f');
        $qb->select('f')
           ->join('f.eleve', 'e')
           ->addSelect('e')
           ->join('f.classe', 'c')
           ->addSelect('c')
           ->where('e.renvoye = :renvoi AND c.id = :classeId') 
           ->setParameter('renvoi', $renvoi)
           ->setParameter('classeId', $classeId)
         ;

        return $qb->getQuery()
                  ->getResult();
    }
   
    public function eleveDUneClasseActuelle(int $as, int $annexeId, $ids)
    {
      $renvoi = false;
      $qb = $this->createQueryBuilder('f');
      $qb->select('f')
         ->join('f.eleve', 'e')
         ->addSelect('e')
         ->where('f.eleve IN (:ids) AND f.annee = :an AND e.renvoye = :renvoi AND e.annexe = :annexeId')
         ->setParameter('renvoi', $renvoi)
         ->setParameter('ids', $ids)
         ->setParameter('an', $as)
         ->setParameter('annexeId', $annexeId)
      ;
      return $qb
        ->getQuery()
        ->getResult()
      ;
    }

    public function classesDeCertainEleves(int $as, int $annexeId, $ids)
    {
      $renvoi = false;
      $qb = $this->createQueryBuilder('f');
      $qb->select('f')
         ->join('f.eleve', 'e')
         ->addSelect('e')
         ->where('e.id IN (:ids) AND f.annee = :an AND e.renvoye = :renvoi AND e.annexe = :annexeId')
         ->setParameter('renvoi', $renvoi)
         ->setParameter('ids', $ids)
         ->setParameter('an', $as)
         ->setParameter('annexeId', $annexeId)
      ;
      return $qb
        ->getQuery()
        ->getResult()
      ;
    }
}
